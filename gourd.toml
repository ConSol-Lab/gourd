# This is an example usage file

# The path to the gourd wrapper binary
wrapper = "./target/release/gourd_wrapper"

# A path in which to store the algorithm outputs
output_path = "/tmp/gourd/output"

# A path in which to store the metrics generated by gourd
metrics_path = "/tmp/gourd/metrics"

# The directory in which experiments are stored
experiments_folder = "/tmp/gourd/experiments"

# A new program. The syntax is (strictly) [programs.<name>]
[programs.test_one]
binary = "/bin/sleep"
arguments = []

# Another program
[programs.test_two]
binary = "/bin/sleep"
arguments = []

# Every program is ran on every input
# Inputs are defined as follows: [inputs.<name>]
[inputs.input_one]
input = "./in_file_one.txt"
arguments = []

[inputs.input_two]
input = "./in_file_two.txt"
arguments = []


# In order to run on Slurm,
# the following section also needs to be defined.
# When running locally it is ignored, and can be omitted.
[slurm]
# The name of the experiment, can be used to (manually) identify the jobs in the slurm queue
experiment_name = "some_experiment"

# The partition to run on
partition = "compute"

# The time limit for each job.
# A job is a combination of a program and an input
time_limit = "00:10:00" # format is one of HH:MM:SS, DD-HH:MM:SS or MM

# The number of CPUs to use *for each* job
cpus = 1

# The amount of memory to use *per cpu, per job*
mem_per_cpu = 128 # in MB