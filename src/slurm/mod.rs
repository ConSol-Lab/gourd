mod info;
/// Currently used implementation of interacting with SLURM through the CLI
pub mod interactor;

use std::path::PathBuf;

use anyhow::Result;

use crate::config::Config;
use crate::experiment::Experiment;

/// The config options when running through Slurm
#[derive(Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
pub struct SlurmConfig {
    /// The name of the experiment. This is used (parametrically) as the job name in SLURM, and for the output directory.
    pub experiment_name: String, // not sure if we need this user-provided or generated by gourd, but it's one of the options and i couldn't tell if it's mandatory or not

    /// Which node partition to use. On DelftBlue, the options are:
    /// - "compute"
    /// - "compute-p2"
    /// - "gpu"
    /// - "gpu-a100"
    /// - "memory"
    /// - "trans"
    /// - "visual"
    pub partition: String, // technically this would be an enum, but it's different per cluster so i don't know if we should hardcode delftblue's options

    /// Maximum time allowed _for each_ job.
    pub time_limit: String, // this is a string because slurm jobs can be longer than 24h, which is the largest value in toml time. format needs to be either "days-hours:minutes:seconds" or "minutes"

    /// CPUs to use per job
    pub cpus: usize,

    /// Memory in MB to allocate per CPU per job
    pub mem_per_cpu: usize,

    /// Where slurm should put the stdout and stderr of the job.
    pub out: Option<PathBuf>,
}

/// The interface for interacting with a SLURM cluster.
/// This can be via a version-specific CLI, via a REST API, or via a library.
pub trait SlurmInteractor {
    /// Check the version of slurm on the current environment.
    /// returns an error if the version is not supported, or if slurm is not present.
    fn check_version(&self) -> Result<()>;
    /// Check if the provided partition is valid.
    fn check_partition(&self, partition: &str) -> Result<()>;

    /// actually running batch jobs. still not completely decided what this will do, more documentation soonâ„¢
    fn run_job(&self, config: &Config, experiment: &mut Experiment) -> Result<()>;
}
